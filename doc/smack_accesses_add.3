'\" t
.\" This file is part of libsmack
.\" Copyright (C) 2012 Intel Corporation
.\" Copyright (C) 2012 Samsung Electronics Co.
.\"
.\" This library is free software; you can redistribute it and/or
.\" modify it under the terms of the GNU Lesser General Public License
.\" version 2.1 as published by the Free Software Foundation.
.\"
.\" This library is distributed in the hope that it will be useful, but
.\" WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
.\" Lesser General Public License for more details.
.\"
.\" You should have received a copy of the GNU Lesser General Public
.\" License along with this library; if not, write to the Free Software
.\" Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
.\" 02110-1301 USA
.\"
.\" Author:
.\" Brian McGillion <brian.mcgillion@intel.com>
.\" Rafal Krypa <r.krypa@samsung.com>
.\"
.TH "SMACK_ACCESSES_ADD" "3" "14/06/2012" "Libsmack 1\&.0"
.SH NAME
smack_accesses_new, smack_accesses_free, smack_accesses_save, smack_accesses_apply, smack_accesses_clear, smack_accesses_add, smack_accesses_add_from_file, smack_revoke_subject \- Manipulate Smack rules
.SH SYNOPSIS
.B #include <sys/smack.h>
.sp
.BI "int smack_accesses_new(struct smack_accesses **" accesses ");"
.br
.BI "void smack_accesses_free(struct smack_accesses *" handle ");"
.br

.BI "int smack_accesses_add(struct smack_accesses *" handle ", const char *" subject ", const char *" object ", const char *" access_type ");"
.br
.BI "int smack_accesses_add_modify(struct smack_accesses *" handle ", const char *" subject ", const char *" object ", const char *" access_add ", const char *" access_del ");"
.br
.BI "int smack_accesses_add_from_file(struct smack_accesses *" accesses ", int " fd ");"
.br
.BI "int smack_accesses_save(struct smack_accesses *" handle ", int " fd ");"
.br

.BI "int smack_accesses_apply(struct smack_accesses *" handle ");"
.br
.BI "int smack_accesses_clear(struct smack_accesses *" handle ");"
.br

.BI "int smack_revoke_subject(const char *" subject ");"
.br

.SH DESCRIPTION
These methods provide a means to create properly formatted smack rules that can be stored to file or loaded directly into the kernel.  For loading and unloading rules directly into the kernel the calling process must have the CAP_MAC_ADMIN capability.  Most users will generally store the rules to a file that can be read by
.BR smackload (8).
If the rules should be loaded on system reboot then the file should be stored in /etc/smack/accesses.d/<name>.rules.

.BR smack_accesses_new ()
creates a new empty smack_accesses instance pointed to by
.IR accesses .

.BR smack_accesses_free ()
destroys a previously created instance of smack_accesses pointed to by
.IR handle .

.BR smack_accesses_add ()
create a rule allowing a 
.I subject
to access an
.I object
with the type of access defined in
.I access_type
and store the result in
.IR handle .
If a rule for the specified labels already exists it will be overwritten.

.BR smack_accesses_add_modify ()
create a modification rule for the specified
.I subject
and
.I object
labels allowing the access specified in
.I access_add
and disallowing the access defined by
.IR access_del .
The result is stored in
.IR handle .
If a rule for the specified labels already exists it will be modified, otherwise a new rule will be created with the permissions specified in access_add added and those specified in access_del removed.

.BR smack_accesses_add_from_file ()
read a set of rules from a file and store them in
.IR handle .
The file must be a series of lines, 1 per rule, in the format "%s %s %s"
.B "(subject object access_type)"

.BR smack_accesses_save ()
save the smack_accesses instance pointed to by
.I handle
to the file specified by the file-descriptor
.IR fd .

.BR smack_accesses_apply ()
apply the rules pointed to by
.I handle
directly to the kernel.  The calling process must have the CAP_MAC_ADMIN capability.
.BR smack_accesses_clear ()
remove the rules pointed to by
.I handle
directly from the kernel.  The calling process must have the CAP_MAC_ADMIN capability.

.BR smack_revoke_subject ()
Sets the access to '-' (no access allowed) for all access rules with given
.I subject
label directly in the kernel.  The calling process must have the CAP_MAC_ADMIN capability.
.SH RETURN VALUE
All methods, except
.IR smack_accesses_free ,
return 0 on success and a negative value on failure (in which case
.I errno
is set appropriately).
.SH EXAMPLES
.nf
#include <sys/smack.h>

int apply_rules_file(int fd, int clear)
{
	struct smack_accesses *rules = NULL;
	int ret = 0;

	if (smack_accesses_new(&rules))
		return \-1;

	if (smack_accesses_add_from_file(rules, fd)) {
		smack_accesses_free(rules);
		return \-1;
	}

	if (!clear)
		ret = smack_accesses_apply(rules);
	else
		ret = smack_accesses_clear(rules);

	smack_accesses_free(rules);

	return ret;
}
.fi
.SH SEE ALSO
.BR smack_have_access (3)
