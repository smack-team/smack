'\" t
.\" This file is part of libsmack
.\" Copyright (C) 2012 Intel Corporation
.\" Copyright (C) 2012 Samsung Electronics Co.
.\"
.\" This library is free software; you can redistribute it and/or
.\" modify it under the terms of the GNU Lesser General Public License
.\" version 2.1 as published by the Free Software Foundation.
.\"
.\" This library is distributed in the hope that it will be useful, but
.\" WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
.\" Lesser General Public License for more details.
.\"
.\" You should have received a copy of the GNU Lesser General Public
.\" License along with this library; if not, write to the Free Software
.\" Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
.\" 02110-1301 USA
.\"
.TH "SMACK_HAVE_ACCESS" "3" "06/20/2012" "Libsmack 1\&.0"
.SH NAME
smack_have_access, smack_new_label_from_self, smack_new_label_from_socket, smack_label_length \- Userspace interaction with Smack
.SH SYNOPSIS
.B #include <sys/smack.h>
.sp
.BI "int smack_have_access(const char *" subject ", const char *" object ", const char *" access ");"
.br
.BI "int smack_new_label_from_self(char **" label ");"
.br
.BI "int smack_set_label_for_self(char **" label ");"
.br
.BI "int smack_new_label_from_socket(int " fd ", char **" label ");"
.br
.BI "int smack_label_length(const char *" label ");"
.sp
.SH DESCRIPTION
Smack is a Mandatory Access Control (MAC) based security mechanism for the Linux kernel.  It works on the basis of context, which is stored as a label in the extended attributes (xattr) of a file.  When a process is started the kernel ensures that this context is assigned to the running process.  By default a process can only interact with processes and filesystem objects that have the same context as itself and is denied access to all other contexts.  Rules can be created to grant access to other contexts, these are generally created on package installation and can only be modified by a process that has the CAP_MAC_ADMIN capability.
.PP
As with most actor based models the entity that initiates the interaction is called the
.I subject
and the item that is being accessed is called the
.IR "object" .
The type of interaction that is being performed is known as the
.I access
and is based on the standard filesystem access types "R","W","X" etc.  The functions presented here provide a way for a process to determine the Smack context of the the system in which it is running and that of a process that is connected to it over a socket connection.
.PP
The function
.BR smack_have_access ()
takes a
.I subject
context, and the context of the item that it is interacting with, the
.IR "object" ,
along with the type of
.I access
that is requested.  The kernel is queried about the access rules and informs the the caller it that access request is allowed.  This method is generally used to allow more fine grained access control to be enforced in userspace processes. 
.PP
.BR smack_new_label_from_self ()
determines the context of the current process and creates a new storage for this which it assigns to
.I label
to this upon return.  It is the responsibility of the caller to free
.I label
when it is no longer required.
.PP
.BR smack_set_label_for_self ()
sets the context of the current process to
.IR label .
The calling process must have the CAP_MAC_ADMIN capability.
.PP
.BR smack_new_label_from_socket ()
takes the file descriptor,
.IR "fd" ,
of the socket and determines it's context and creates a new storage for this which it assigns to
.I label
on return.  It is the callers responsibility to free
.I label
when it is no longer required.
.PP
.BR smack_label_length ()
calculates length of
.IR label ,
and validates it.
.SH RETURN VALUE
.BR smack_new_label_from_self ()
and
.BR smack_new_label_from_socket ()
return 0 on success or \-1 on error (in which case,
.I errno
is set appropriately).

.BR smack_have_access ()
returns 1 if allowed, 0 if no access and \-1 on error (in which case,
.I errno
is set appropriately).

.BR smack_label_length ()
returns length of
.I label
if it is valid and negative value if it's not.
